#+TITLE:   Nickey Emacs Configuration
#+AUTHOR:  Nikolay Brovko <i@nickey.ru>
#+DATE:    <2018-11-09 16:00>
#+STARTUP: content

#+begin_src emacs-lisp
  ;;     _   ________
  ;;    / | / / ____/___ ___  ____ ___________
  ;;   /  |/ / __/ / __ `__ \/ __ `/ ___/ ___/
  ;;  / /|  / /___/ / / / / / /_/ / /__(__  )
  ;; /_/ |_/_____/_/ /_/ /_/\__,_/\___/____/
#+end_src

#+HTML: <img src="https://raw.githubusercontent.com/inickey/nemacs/master/screenshot.jpg" style="width:100%" alt="screenshot">

Я давно использую =org-mode= для формирования файла инициализации Emacs, периодически переписывая его с нуля и перенося в него только самое необходимое из предыдущей версии. Раньше я комментировал все на английском языке, но в сети и так полно примеров на английском, так что пусть пока будет на русском.

Так как недавно я перебрался с Gnome на i3wm, я стал использовать emacs-daemon и терминальную версию редактора, так что наведение красоты в этот раз пока сюда не попало (кое-что, тем не менее, уже добавлено).

Вот конфигурации других людей, в которых я когда-то почерпнул что-то интересное (их, вообще-то, было много больше, но остальных сейчас не припомню). Порядок - алфавитный:
- Bozhidar Batsov [[https://github.com/bbatsov/emacs.d][GitHub]]
- Dawid Eckert    [[https://github.com/daedreth/UncleDavesEmacs][GitHub]]
- Diego Zamboni   [[https://github.com/zzamboni/dot-emacs][GitHub]] [[https://zzamboni.org/post/my-emacs-configuration-with-commentary/][Blog]]
- Mike Zamansky   [[https://github.com/zamansky/using-emacs][GitHub]]
- Sacha Chua      [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][GitHub]] [[http://pages.sachachua.com/.emacs.d/Sacha.html][Blog]]

Этот файл также доступен в [[https://nickey.ru/20181110-my-emacs-config.html][моем блоге]] и [[https://github.com/inickey/nemacs][на GitHub]].

* Запуск и инициализация

** Персональная информация

   Требуется, как минимум, для работы с почтой.

   #+begin_src emacs-lisp
     (setq user-full-name    "Nikolay Brovko"
           user-mail-address "i@nickey.ru")
   #+end_src
   
** Настройка репозиториев и use-package

   Используем =Elpa=, =Melpa=, =Melpa Stable= и =Org=.

   #+begin_src emacs-lisp
     (setq package-archives
           '(("gnu"          . "https://elpa.gnu.org/packages/")
             ("melpa"        . "https://melpa.org/packages/")
             ("melpa-stable" . "https://stable.melpa.org/packages/")
             ("org"          . "https://orgmode.org/elpa/")))
   #+end_src

   Загружаем пакет =use-package=, предварительно установив, если необходимо.

   #+begin_src emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (require 'use-package)
   #+end_src
   
** Установка библиотек

   Когда требуется быстро набросать функцию, автоматизирующую то или иное действие, наличие этих библиотек под рукой сильно облегчает жизнь.

   - [[https://github.com/magnars/dash.el][dash.el]] A modern list api for Emacs. No 'cl required.
   - [[https://github.com/magnars/s.el][s.el]]    The long lost Emacs string manipulation library.
   - [[https://github.com/rejeep/f.el][f.el]]    Modern API for working with files and directories.

   #+begin_src emacs-lisp
     (dolist (library '(dash dash-functional s f))
       (eval `(use-package ,library :ensure t)))
   #+end_src
   
** Переопределение =custom-file=

   Дабы не захламлять =.emacs= автоматически генерируемым мусором, перенаправляем его в другом месте.

   #+begin_src emacs-lisp
     (setq custom-file "~/.emacs.d/custom.el")
     (when (file-exists-p custom-file)
       (load custom-file))
   #+end_src

** Сохранение пути к конфигу

   Дабы иметь возможность удобно обращаться к другим файлам в репозитории и открывать конфиг по горячим клавишам, запомним, где что лежит.

   #+begin_src emacs-lisp
     (setq n-nemacs-file (or buffer-file-name load-file-name)
           n-nemacs-dir  (f-dirname n-nemacs-file))
   #+end_src
   
** Отключение бекапов и мусора возле рабочих файлов

   Переносим все создаваемые редактором временные файлы и бекапы в =~/.emacs.d/backups/=. Локфайлы - выключаем.

   #+begin_src emacs-lisp
     (setq backup-directory-alist
           '((".*" . "~/.emacs.d/backups/")))

     (setq auto-save-file-name-transforms
           '((".*" "~/.emacs.d/backups/" t)))

     (setq create-lockfiles nil)
   #+end_src
   
** Заменяем =yes-or-no-p= на =y-or-n-p= повсеместно

   Жизнь слишком коротка, чтобы писать =yes= или =no=.
   
   Так и не решил, относить это к инициализации или рабочему процессу, пока пусть будет здесь...

   #+begin_src emacs-lisp
     (fset #'yes-or-no-p #'y-or-n-p)
   #+end_src
   
** Не показывать стартовый экран

   Не знаю, скольким людям он пригодился, как по мне - вещь не особенно полезная.

   #+begin_src emacs-lisp
     (setq inhibit-startup-screen 't)
   #+end_src

** Шрифт в GUI

   Все таки периодически запускаю emacs в GUI, поэтому нужно установить фонт.

   #+begin_src emacs-lisp
     (let ((default-font "IBM Plex Mono 12"))
       (set-default-font default-font)
       (add-to-list 'default-frame-alist `(font . ,default-font)))
   #+end_src

** Сокрытие верхнего меню, тулбара и скроллбара

   Сначала оставил менюбар, чтобы проще было находить границы окна, но во-первых, он выбивается из темы оформления, а во-вторых, границы окна лучше выделить средствами оконного менеджера, так что опять скрываю.

   Тулбар и скроллбар скрываю за компанию - в терминальной версии редактора его все равно нет.

   #+begin_src emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
   #+end_src
   
** Системный буфер обмена

   Поскольку я использую терминальную версию Emacs, kill-ring редактора и системный clipboard ничего друг о друге не знают. Пакет =xclip= решает эту проблему с помощью одноименной утилиты для командной строки.

   #+begin_src emacs-lisp
     (use-package xclip
       :ensure    t
       :config    (xclip-mode 1))
   #+end_src
   
** Украшательство модлайна с =powerline=

   Временно добавлю - пока не определился, буду ли его использовать.

   #+begin_src emacs-lisp
     (use-package powerline
       :ensure    t
       :config    (powerline-center-theme))
   #+end_src
   
** =Diminish= для сокрытия минорных режимов

   Зачастую случается так, что минорных режимов набирается с десяток, и в итоге они сжирают все место в модлайне. Чтобы скрывать очевидные режимы (например, включенные глобально - типа Undo Tree), используем =Diminish=.

   #+begin_src emacs-lisp
     (use-package diminish
       :ensure    t)
   #+end_src
  
* Рабочий процесс

** Пробелы вместо табуляции

   Не слушаем Ричарда Хендрикса и беспощадно ставим пробелы вместо табуляции.

   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil
                   tab-width        4)
   #+end_src
   
** Удаление слова перед курсором как в bash

   Я так и не понял, что удаляет Emacs по умолчанию по нажатию =C-w=, но меня это не устраивает. Надо либо удалять выделенную область, либо слово перед курсором.

   #+begin_src emacs-lisp
     (defun n-kill-region-or-backward-word ()
       (interactive)
       (call-interactively
        (if (use-region-p)
            #'kill-region
          #'backward-kill-word)))

     (global-set-key (kbd "C-w") #'n-kill-region-or-backward-word)
   #+end_src

** Выравнивание значений при присваивании (по символу равенства)

   Я стараюсь держать символы равенства выровненными там, где это не нарушает стандарта кодирования языка или проекта. Пример ниже

   #+begin_example
     foo    = "bar";
     hello  = "world";
     foobar = "baz";
   #+end_example

   #+begin_src emacs-lisp
     (defun align-to-equals (begin end)
       "Align region to equal signs"
       (interactive "r")
       (align-regexp begin end "\\(\\s-*\\)=" 1 1 ))

     (global-set-key (kbd "M-n M-=") #'align-to-equals)
   #+end_src

** Editorconfig

   Используем [[https://editorconfig.org/][editorconfig]] для управления кодировкой, размером и стилем отступов и т. д.

   #+begin_src emacs-lisp
     (use-package editorconfig
       :ensure    t
       :config
       (editorconfig-mode 1))
   #+end_src
  
** Отключение сворачивания по =C-z=

   В терминале =C-z= отправляет приложение в фоновый режим, что в случае с емаксом, который сам терминал открыть может, доставляет только лишние неудобства при случайном нажатии. Кто-то предпочитает назначить на это сочетание отмену последнего действия, мне же будет спокойнее, если оно вообще ничего делать не будет.

   #+begin_src emacs-lisp
     (global-set-key (kbd "C-z") #'ignore)
   #+end_src

** Переключение буферов по =C-x C-b=

   =bs-show= начал использовать еще в первые дни использования Emacs, с тех пор чего только не перепробовал, последней попыткой был =helm-buffers-list=, но как по мне, это менее удобно, чем открыть список буферов, в котором обычно не более 5-10 штук и клавишами =n= и =p= выбрать нужный.

   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x C-b") #'bs-show)
   #+end_src
   
** Перемещение по буферу с помощью =Ace Jump=

   Использовать клавиши навигации - контрпродуктивно! =Ace Jump= оцениваешь, попользовавшись им пару дней и поломав привычку перемещаться по тексту линейно.
   
   #+begin_src emacs-lisp
     (use-package ace-jump-mode
       :ensure    t
       :bind      (("C-c SPC" . #'ace-jump-mode)))
   #+end_src
   
** Подсветка парных скобок

   Для лисповых языков, да и не только, переоценить эту функцию очень сложно...

   #+begin_src emacs-lisp
     (show-paren-mode 1)
   #+end_src

   С помощью переменной =show-paren-style= можно установить способ подсветки:
   - ='expression= всё выражение между парными скобками
   - ='parenthesis= только сами скобки
   - ='mixed= смешанный вариант - в случае, если парная скобка находится в области видимости экрана, будут подсвечены только скобки, в противном случае - все выражение.
   
** Сниппеты с =yasnippet=

   Современные языки и фреймворки, вроде как, сильно сократили количество бойлерплейт-кода. Но, во-первых, не до нуля, а во-вторых, не все.

   Добавляем директорию =snippets= в список директорий для поиска сниппетов. Поскольку она добавляется в начало списка, она же будет путем сохранения для сниппетов, добавляемых с помощью =yas-new-snippet=.

   #+begin_src emacs-lisp
     (use-package yasnippet
       :ensure t
       :config
       (progn
         (add-to-list 'yas-snippet-dirs (f-join n-nemacs-dir "snippets"))
         (yas-global-mode 1)))
   #+end_src

   Чтобы не создавать все сниппеты руками, подключаем пакет =yasnippet-snippets=, в который входит множество готовых сниппетов для большого количества мажорных режимов.

   #+begin_src emacs-lisp
     (use-package yasnippet-snippets
       :ensure    t
       :after     yasnippet)
   #+end_src

** Автодополнение скобок, кавычек, etc

   Раньше я использовал =autopair=, но сейчас заглянул к нему в репозиторий и как-то там безрадостно. Случайно наткнулся на =smartparens=, его и буду пробовать - время покажет.

   #+begin_src emacs-lisp
     (use-package smartparens
       :ensure    t
       :diminish  smartparens-mode
       :config
       (progn
         (require 'smartparens-config)
         (smartparens-global-mode 1)))
   #+end_src
   
** Управление git-репозиторием с =Magit=

   =Magit= - пожалуй, лучшая реализация интерфейса к git-репозиторию из всех, что мне попадались.

   #+begin_src emacs-lisp
     (use-package magit
       :ensure    t
       :bind      (("C-x g" . #'magit-status)))
   #+end_src

   =ediff= создает дополнительный фрейм, что доставляет проблемы с фокусом и компоновкой окон на тайловых оконных менеджерах. Отключаем такое поведение.

   #+begin_src emacs-lisp
     (setq ediff-window-setup-function 'ediff-setup-windows-plain)
   #+end_src

** =Writeroom= для работы над текстами

   Если в процессе кодинга информация вроде имени открытого файла, текущей git-ветки, положения в документе идут строго на пользу, то при работе над постами в блог, документацией и tex-документами, она только мешает. =Writeroom= отображает только текущий буфер, прячет модлайн, ограничивает текст по ширине и смещает его в центр окна (не путать с выравниванием по центру). Вкупе с переводом окна в фулл-скрин и увеличением шрифта это сильно помогает сосредоточиться на тексте.

   #+begin_src emacs-lisp
     (use-package writeroom-mode
       :ensure    t
       :bind      ("M-n M-w" . #'writeroom-mode))
   #+end_src

** =Neotree= дерево каталогов а-ля Sublime, VSCode, etc

   Вообще говоря, я как-то привык жить без него, но почему бы и нет?

   #+begin_src emacs-lisp
     (use-package neotree
       :ensure    t
       :bind      ("M-n M-n" . #'neotree-toggle))

     (use-package all-the-icons
       :ensure    t
       :config
       (setq neo-theme 'icons))
   #+end_src
   
** Мажорные режимы для различных языков программирования и разметки

   За пару месяцев их набирается полтора-два десятка, так что буду добавлять по мере использования.
   
*** =Web-mode= для верстки

    Незаменимая вещь для работы с html, php, twig и прочими html-подобными файлами. Умеет расставлять отступы, автоматически закрывает открываемые теги, комментирует-раскомментирует блок, переименовывает тег и многое другое.

    #+begin_src emacs-lisp
      (use-package web-mode
        :ensure    t
        :config
        (progn
          (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.twig\\'"  . web-mode))
          (add-to-list 'web-mode-engines-alist '("php"  . "\\.php\\'"))))
    #+end_src

*** =PHP=

    Тут и добавить нечего - пользуем =php-mode= для работы с php-кодом. Требования невысоки - нормальная подсветка синтаксиса, автоматические отступы, открытие документации.
    По умолчанию использовать стиль =psr-2=.

    #+begin_src emacs-lisp
      (use-package php-mode
        :ensure    t
        :config
        (add-hook 'php-mode-hook #'php-enable-psr2-coding-style))
    #+end_src
   
*** =JavaScript=

    Вообще говоря, =js2= это минорный, а не мажорный режим, но и выносить его за пределы JavaScript-раздела смысла нет.

    #+begin_src emacs-lisp
      (use-package js2-mode
        :ensure    t
        :config
        (add-hook 'js-mode-hook #'js2-minor-mode))
    #+end_src

*** =VALA=

    В последнее время редактировал и писал много кода на Vala и, похоже, в будущем еще предстоит, поэтому решил перенести из локального конфига в глобальный.

    #+begin_src emacs-lisp
      (use-package vala-mode
        :ensure    t)
    #+end_src

    Т. к. в Vala принято использовать [[https://mesonbuild.com/][Meson]] для сборки проекта, подключение соответствующего режима положу сюда.

    #+begin_src emacs-lisp
      (defvar meson--project-bin nil
        "Keep last project binary to run with GDB")

      (defvar meson-build-dir "build"
        "Directory which will be an argument for meson and ninja commands")

      (defvar meson-auto-config t
        "If build directory isn't exists, it'll be created automatically")

      (defun meson-project-root (path)
        "Return the most distant directory including meson.build file"
        (when-let ((meson-file (locate-dominating-file path "meson.build")))
          (if (locate-dominating-file (f-parent meson-file) "meson.build")
              (meson-project-root (f-parent meson-file))
            meson-file)))

      (defun meson-same-project-p (path1 path2)
        "Check two paths are in same meson project"
        (and path1 path2
             (string-equal (meson-project-root path1) (meson-project-root path2))))

      (defun meson-configure-project (path)
        "Create meson build directory which will be named as `meson-build-dir' value"
        (let ((default-directory path))
          (shell-command (format "meson %s" meson-build-dir))))

      (defun meson-project-build-dir (path)
        "Return project build dir. Configuring project with meson if it not exists"
        (when-let (project-root (meson-project-root path))
          (let ((project-build-dir (f-join project-root meson-build-dir)))
            (unless (f-exists-p project-build-dir)
              (and meson-auto-config (meson-configure-project project-root)))
            (when (f-exists-p project-build-dir) project-build-dir))))

      (defun meson-set-compile-command ()
        "Sets buffer-local `compile-command' variable"
        (when-let (project-build-dir (meson-project-build-dir (buffer-file-name)))
          (set (make-local-variable 'compile-command)
               (format "ninja -C %s" project-build-dir))))

      (defun meson-set-project-bin (&optional path)
        "Ask user for current project binary path and store it in `meson--project-bin'"
        (interactive "FBinary path: ")
        (setq meson--project-bin path))

      (defun meson-project-bin (path)
        "Return binary file for current project or ask it from user"
        (if (meson-same-project-p meson--project-bin path)
            meson--project-bin
          (call-interactively #'meson-set-project-bin)))

      (defun meson-project-run ()
        "Run project binary"
        (interactive)
        (when-let ((project-bin (meson-project-bin (buffer-file-name))))
          (shell-command project-bin)))

      (defun meson-project-run-tests ()
        "Run tests with ninja"
        (interactive)
        (when-let (project-build-dir (meson-project-build-dir (buffer-file-name)))
          (shell-command (format "ninja -C %s test" project-build-dir))))

      (defun meson-project-gdb ()
        "Run project binary over GDB debugger"
        (interactive)
        (when-let* ((project-bin (meson-project-bin (buffer-file-name)))
                    (project-bin-rel (f-relative project-bin
                                                 (f-dirname (buffer-file-name))))
                    (gdb-cmd (read-string "Run gdb (like this): "
                                          (format "gdb -i=mi %s" project-bin-rel))))
          (gdb gdb-cmd)))

      (defun vala-set-meson-keys ()
        "Hook setting buffer-local Vala and Meson specific keybindings"
        (local-set-key (kbd "C-c C-c") #'compile)
        (local-set-key (kbd "C-c C-r") #'meson-project-run)
        (local-set-key (kbd "C-c C-t") #'meson-project-run-tests)
        (local-set-key (kbd "C-c C-g") #'meson-project-gdb)
        (local-set-key (kbd "C-c b")   #'meson-set-project-bin))

      (use-package meson-mode
        :ensure    t
        :after     (vala-mode)
        :init
        (add-hook 'vala-mode-hook #'meson-set-compile-command)
        (add-hook 'vala-mode-hook #'vala-set-meson-keys))
    #+end_src

    Еще неплохо было бы автоматически вставлять GNU/GPL заголовок в каждый файл, если лицензия применима для текущего проекта.

    #+begin_src emacs-lisp
      (defun n-locate-dominating-file (file name)
        (when-let (dir (locate-dominating-file file name))
          (f-join dir name)))

      (defun n-is-gpl-project (path)
        (when-let (copying-file (or (n-locate-dominating-file path "COPYING")
                                    (n-locate-dominating-file path "LICENSE")))
          (with-temp-buffer
            (insert-file-contents copying-file)
            (search-forward "GNU GENERAL PUBLIC LICENSE" nil t))))

      (defun insert-gpl-header ()
        (when-let (file (buffer-file-name))
          (when (and (not (file-exists-p file)) (n-is-gpl-project file))
            (when-let (snippet (yas-lookup-snippet "gpl3" major-mode t))
              (yas-minor-mode 1)
              (yas-expand-snippet snippet)))))

      (add-hook 'vala-mode-hook #'insert-gpl-header t)
    #+end_src
    
*** =YAML=

    Довольно часто приходится редактировать YAML в различных конфигах. Опять же, от режима требуется, разве что, подсветка синтаксиса и сохранение отступов.

    #+begin_src emacs-lisp
      (use-package yaml-mode
        :ensure    t)
    #+end_src
    
*** =Markdown=

    =README.md= - наше все.

    #+begin_src emacs-lisp
      (use-package markdown-mode
        :ensure    t)
    #+end_src

* Жизнедеятельность

** Самоорганизация

*** Установка свежего =org-mode=

    Устанавливаем свежую версию =org-mode= c дополнениями из официального репозитория.

    #+begin_src emacs-lisp
      (use-package org-plus-contrib
        :ensure    t
        :defer     t)
    #+end_src

    Всегда включаем перенос по словам в длинных строках для org-mode (практика показала, что выключать его приходится многократно реже, чем включать).

    #+begin_src emacs-lisp
      (add-hook 'org-mode-hook 'visual-line-mode)
    #+end_src

*** Настройка шаблонов для =org-capture=

    =org-capture= это крайне полезная штука, позволяющая быстро делать заметки и комментарии из любого места, сохраняя их в указанных местах. В моем случае org-capture вызывается командой =C-c c=.

    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c c") #'org-capture)
    #+end_src

    Мои org-файлы обычно лежат в папке =~/Org=, которая, в свою очередь, является симлинком на папку Org в облаке.

    #+begin_src emacs-lisp
      (setq n-org-files-dir "~/Org"
            n-org-inbox     (f-join n-org-files-dir "inbox.org")
            n-org-projects  (f-join n-org-files-dir "projects.org")
            n-org-calendar  (f-join n-org-files-dir "calendar.org")
            n-org-someday   (f-join n-org-files-dir "someday.org")
            n-org-logbook   (f-join n-org-files-dir "logbook.org.gpg"))
    #+end_src

    #+begin_src emacs-lisp
      (setq org-default-notes-file n-org-inbox)
    #+end_src

    Шаблоны, которые я использую:
    - =i= inbox   Попадает во Входящие для последующего разбора, схоже с [[https://ru.wikipedia.org/wiki/Getting_Things_Done][GTD]].
    - =t= todo    Попадает во Входящие в виде TODO-заметки для последующего разбора, схоже с [[https://ru.wikipedia.org/wiki/Getting_Things_Done][GTD]].
    - =m= movie   Сохраняет фильм для последующего просмотра. При вводе спрашивает название, жанр, год, ссылку на описание.
    - =l= logbook Используется для фиксации различных событий и мыслей в шифрованном файле, отдаленно напоминает дневник, только не дневник.

    #+begin_src emacs-lisp
      (setq n-capture-templates-dir (f-join n-nemacs-dir "org-templates"))
    #+end_src

    #+begin_src emacs-lisp
      (setq org-capture-templates
            `(("i" "Plain inbox entry"
               entry  (file+headline ,n-org-inbox     "Входящие")
               (file ,(f-join n-capture-templates-dir "inbox-plain.org")))
              ("l" "Logbook entry"
               entry  (file+olp+datetree ,n-org-logbook)
               (file ,(f-join n-capture-templates-dir "logbook.org")))))
    #+end_src

*** Настройка =org-refile=

    После того, как заметки попали в Inbox, их периодически нужно разбирать, раскладывая по соответствующим разделам и файлам. Для этого служит механизм =org-refile=. Настроим целевые файлы, в которые возможен перенос. Сам Inbox по понятным причинам в этот список не входит.

    #+begin_src emacs-lisp
      (setq org-refile-targets `((,n-org-projects . (:maxlevel . 1))
                                 (,n-org-calendar . (:maxlevel . 1))
                                 (,n-org-someday  . (:maxlevel . 2))))
    #+end_src

*** Настройка =org-agenda=

    Когда в заметках наведен порядок, хотелось бы в удобоваримом виде получить список дел на день, неделю или без привязки к календарю. Для этого есть =org-agenda=. Указываем файлы, из которых нужно собирать заметки и назначаем клавиши вызова.

    #+begin_src emacs-lisp
      (setq org-agenda-files (list n-org-inbox n-org-projects n-org-calendar))
    #+end_src

    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c a") #'org-agenda)
    #+end_src

*** Настройка =org-archive=

    Удаление выполненных или отмененных дел - плохая практика т. к. иногда (не так уж редко) бывает нужно уточнить, что именно было сделано, когда, если отменено - то почему и т. д. Короче говоря, айтишники тяжело расстаются с метаинформацией. Поэтому вместо удаления лучше использовать =org-archive=, который позволяет перемещать ставшие ненужными заметки или деревья в отдельный файл, добавляя к ним информацию о дате архивирования, предыдущем местонахождении и др.

    Чтобы файл не мозолил глаза, я использую скрытый файл =.archive.org=, а заметки в нем раскладываются по разделам с именами файлов, из которых они были перемещены.

    #+begin_src emacs-lisp
      (setq org-archive-location (f-join n-org-files-dir
                                         ".archive.org::** Из файла %s"))
    #+end_src

** [[https://ru.wikipedia.org/wiki/%25D0%259C%25D0%25B5%25D1%2582%25D0%25BE%25D0%25B4_%25D0%25BF%25D0%25BE%25D0%25BC%25D0%25B8%25D0%25B4%25D0%25BE%25D1%2580%25D0%25B0][Метод помидора]] ([[https://github.com/TatriX/pomidor][pomidor]])

   По правде сказать, я не так часто пользуюсь этим методом, но иногда все же пользуюсь. Поэтому пусть будет на готове.

   #+begin_src emacs-lisp
     (use-package pomidor
       :ensure    t
       :bind      (("M-n M-p" . #'pomidor))
       :config
       (setq pomidor-play-sound-file #'ignore
             alert-default-style     'libnotify
             pomidor-graph-char      10074))
   #+end_src
   
** Почта (=Gnus=)

   Вообще, для работы с почтой я использую [[https://neomutt.org][neomutt]]. Но поскольку я подписан на множество списков рассылки, где часто присылают код, либо самому приходится отправлять фрагменты кода, сразу использовать редактор бывает очень удобно.

   Извлечением почты у меня занимается [[https://www.offlineimap.org/][offlineimap]], каждые две минуты по крону забирающий почту с сервера по IMAP и аккуратно складывающий ее в папку =~/.mail= в формате Maildir. Помимо того, что это позволяет более полноценно работать с почтой, выбирая инструмент под задачу (иногда просто шелл), так появляется возможность разбирать почту из оффлайна - для десктопа так себе достижение, а для ноутбука бывает очень полезно.

   #+begin_src emacs-lisp
     (setq gnus-select-method '(nnmaildir "nickey" (directory "~/.mail")))
   #+end_src

   Ну а поскольку можно разбирать почту в оффлайне, почему бы ее в оффлайне не писать? Я использую [[https://marlam.de/msmtp/][msmtp]] для отправки почты. В пакете с msmtp идут скрипты =msmtp-enqueue.sh=, =msmtp-listqueue.sh= и =msmtp-runqueue.sh= для работы с очередью отправки. Использую msmtp-enqueue для отправки почты, а msmtp-runqueue запускается по крону для отправки почты.

   #+begin_src emacs-lisp
     (setq message-send-mail-function #'message-send-mail-with-sendmail
           sendmail-program           "~/.local/bin/msmtp-enqueue")
   #+end_src

   По умолчанию Gnus начинает хозяйничать в домашней папке и создавать в ней папки =Mail= и =News=. Спрячем их в глубинах =~/.emacs.d=.

   #+begin_src emacs-lisp
     (setq message-directory  "~/.emacs.d/mail/"
           gnus-directory     "~/.emacs.d/news/"
           nnfolder-directory "~/.emacs.d/mail/archive/")
   #+end_src
