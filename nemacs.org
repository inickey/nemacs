#+TITLE:   Nickey Emacs Configuration
#+AUTHOR:  Nikolay Brovko <i@nickey.ru>
#+DATE:    <2018-11-09 16:00>
#+STARTUP: content

#+begin_src emacs-lisp
  ;;     _   ________
  ;;    / | / / ____/___ ___  ____ ___________
  ;;   /  |/ / __/ / __ `__ \/ __ `/ ___/ ___/
  ;;  / /|  / /___/ / / / / / /_/ / /__(__  )
  ;; /_/ |_/_____/_/ /_/ /_/\__,_/\___/____/
#+end_src

#+HTML: <img src="https://raw.githubusercontent.com/inickey/nemacs/master/screenshot.jpg" style="width:100%" alt="screenshot">

Я давно использую =org-mode= для формирования файла инициализации Emacs, периодически переписывая его с нуля и перенося в него только самое необходимое из предыдущей версии. Раньше я комментировал все на английском языке, но в сети и так полно примеров на английском, так что пусть пока будет на русском.

Так как недавно я перебрался с Gnome на i3wm, я стал использовать emacs-daemon и терминальную версию редактора, так что наведение красоты в этот раз пока сюда не попало (кое-что, тем не менее, уже добавлено).

Вот конфигурации других людей, в которых я когда-то почерпнул что-то интересное (их, вообще-то, было много больше, но остальных сейчас не припомню). Порядок - алфавитный:
- Bozhidar Batsov [[https://github.com/bbatsov/emacs.d][GitHub]]
- Dawid Eckert    [[https://github.com/daedreth/UncleDavesEmacs][GitHub]]
- Diego Zamboni   [[https://github.com/zzamboni/dot-emacs][GitHub]] [[https://zzamboni.org/post/my-emacs-configuration-with-commentary/][Blog]]
- Mike Zamansky   [[https://github.com/zamansky/using-emacs][GitHub]]
- Sacha Chua      [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][GitHub]] [[http://pages.sachachua.com/.emacs.d/Sacha.html][Blog]]

Этот файл также доступен в [[https://nickey.ru/20181110-my-emacs-config.html][моем блоге]] и [[https://github.com/inickey/nemacs][на GitHub]].

* Запуск и инициализация

** Персональная информация

   Требуется, как минимум, для работы с почтой.

   #+begin_src emacs-lisp
     (setq user-full-name    "Nikolay Brovko"
           user-mail-address "i@nickey.ru")
   #+end_src
   
** Настройка репозиториев и use-package

   Используем =Melpa=, =Melpa Stable= и =Org=.

   #+begin_src emacs-lisp
     (setq package-archives
           '(("melpa"        . "https://melpa.org/packages/")
             ("melpa-stable" . "https://stable.melpa.org/packages/")
             ("org"          . "https://orgmode.org/elpa/")))
   #+end_src

   Загружаем пакет =use-package=, предварительно установив, если необходимо.

   #+begin_src emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (require 'use-package)
   #+end_src
   
** Установка библиотек

   Когда требуется быстро набросать функцию, автоматизирующую то или иное действие, наличие этих библиотек под рукой сильно облегчает жизнь.

   - [[https://github.com/magnars/dash.el][dash.el]] A modern list api for Emacs. No 'cl required.
   - [[https://github.com/magnars/s.el][s.el]]    The long lost Emacs string manipulation library.
   - [[https://github.com/rejeep/f.el][f.el]]    Modern API for working with files and directories.

   #+begin_src emacs-lisp
     (dolist (library '(dash dash-functional s f))
       (eval `(use-package ,library :ensure t)))
   #+end_src
   
** Переопределение =custom-file=

   Дабы не захламлять =.emacs= автоматически генерируемым мусором, перенаправляем его в другом месте.

   #+begin_src emacs-lisp
     (setq custom-file "~/.emacs.d/custom.el")
     (when (file-exists-p custom-file)
       (load custom-file))
   #+end_src

** Сохранение пути к конфигу

   Дабы иметь возможность удобно обращаться к другим файлам в репозитории и открывать конфиг по горячим клавишам, запомним, где что лежит.

   #+begin_src emacs-lisp
     (setq n-nemacs-file (or buffer-file-name load-file-name)
           n-nemacs-dir  (f-dirname n-nemacs-file))
   #+end_src
   
** Отключение бекапов и мусора возле рабочих файлов

   Переносим все создаваемые редактором временные файлы и бекапы в =~/.emacs.d/backups/=. Локфайлы - выключаем.

   #+begin_src emacs-lisp
     (setq backup-directory-alist
           '((".*" . "~/.emacs.d/backups/")))

     (setq auto-save-file-name-transforms
           '((".*" "~/.emacs.d/backups/" t)))

     (setq create-lockfiles nil)
   #+end_src
   
** Заменяем =yes-or-no-p= на =y-or-n-p= повсеместно

   Жизнь слишком коротка, чтобы писать =yes= или =no=.
   
   Так и не решил, относить это к инициализации или рабочему процессу, пока пусть будет здесь...

   #+begin_src emacs-lisp
     (fset #'yes-or-no-p #'y-or-n-p)
   #+end_src
   
** Не показывать стартовый экран

   Не знаю, скольким людям он пригодился, как по мне - вещь не особенно полезная.

   #+begin_src emacs-lisp
     (setq inhibit-startup-screen 't)
   #+end_src

** Сокрытие верхнего меню и тулбара

   Сначала оставил менюбар, чтобы проще было находить границы окна, но во-первых, он выбивается из темы оформления, а во-вторых, границы окна лучше выделить средствами оконного менеджера, так что опять скрываю.

   Тулбар скрываю за компанию - в терминальной версии редактора его все равно нет.

   #+begin_src emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
   #+end_src
   
** Цветовая тема

   Сначала думал, достаточно будет настроить цвета в терминале, но нет... Использую дефолтную темную тему из [[https://github.com/belak/base16-emacs][base16]], ту же, что и [[https://github.com/chriskempson/base16-xresources/tree/master/xresources][в терминале]].

   #+begin_src emacs-lisp
     (use-package base16-theme
       :ensure    t
       :config
       (load-theme 'base16-default-dark t))
   #+end_src

** Украшательство модлайна с =powerline=

   Временно добавлю - пока не определился, буду ли его использовать.

   #+begin_src emacs-lisp
     (use-package powerline
       :ensure    t
       :config    (powerline-center-theme))
   #+end_src
   
** =Diminish= для сокрытия минорных режимов

   Зачастую случается так, что минорных режимов набирается с десяток, и в итоге они сжирают все место в модлайне. Чтобы скрывать очевидные режимы (например, включенные глобально - типа Undo Tree), используем =Diminish=.

   #+begin_src emacs-lisp
     (use-package diminish
       :ensure    t)
   #+end_src
  
* Рабочий процесс

** Пробелы вместо табуляции

   Не слушаем Ричарда Хендрикса и беспощадно ставим пробелы вместо табуляции.

   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil
                   tab-width        4)
   #+end_src
   
** Удаление слова перед курсором как в bash

   Я так и не понял, что удаляет Emacs по умолчанию по нажатию =C-w=, но меня это не устраивает. Надо либо удалять выделенную область, либо слово перед курсором.

   #+begin_src emacs-lisp
     (defun n-kill-region-or-backward-word ()
       (interactive)
       (call-interactively
        (if (use-region-p)
            #'kill-region
          #'backward-kill-word)))

     (global-set-key (kbd "C-w") #'n-kill-region-or-backward-word)
   #+end_src
  
** Переключение буферов по =C-x C-b=

   =bs-show= начал использовать еще в первые дни использования Emacs, с тех пор чего только не перепробовал, последней попыткой был =helm-buffers-list=, но как по мне, это менее удобно, чем открыть список буферов, в котором обычно не более 5-10 штук и клавишами =n= и =p= выбрать нужный.

   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x C-b") #'bs-show)
   #+end_src
   
** Перемещение по буферу с помощью =Ace Jump=

   Использовать клавиши навигации - контрпродуктивно! =Ace Jump= оцениваешь, попользовавшись им пару дней и поломав привычку перемещаться по тексту линейно.
   
   #+begin_src emacs-lisp
     (use-package ace-jump-mode
       :ensure    t
       :bind      (("C-c SPC" . #'ace-jump-mode)))
   #+end_src
   
** Автодополнение скобок, кавычек, etc

   Раньше я использовал =autopair=, но сейчас заглянул к нему в репозиторий и как-то там безрадостно. Случайно наткнулся на =smartparens=, его и буду пробовать - время покажет.

   #+begin_src emacs-lisp
     (use-package smartparens
       :ensure    t
       :diminish  smartparens-mode
       :config
       (progn
         (require 'smartparens-config)
         (smartparens-global-mode 1)))
   #+end_src
   
** Управление git-репозиторием с =Magit=

   =Magit= - пожалуй, лучшая реализация интерфейса к git-репозиторию из всех, что мне попадались.

   #+begin_src emacs-lisp
     (use-package magit
       :ensure    t
       :bind      (("C-x g" . #'magit-status)))
   #+end_src

** Мажорные режимы для различных языков программирования и разметки

   За пару месяцев их набирается полтора-два десятка, так что буду добавлять по мере использования.

*** =Web-mode= для верстки

    Незаменимая вещь для работы с html, php, twig и прочими html-подобными файлами. Умеет расставлять отступы, автоматически закрывает открываемые теги, комментирует-раскомментирует блок, переименовывает тег и многое другое.

    #+begin_src emacs-lisp
      (use-package web-mode
        :ensure    t
        :config
        (progn
          (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.php\\'"   . web-mode))
          (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
          (add-to-list 'web-mode-engines-alist '("php"  . "\\.php\\'"))))
    #+end_src

*** =PHP=

    Тут и добавить нечего - пользуем =php-mode= для работы с php-кодом. Требования невысоки - нормальная подсветка синтаксиса, автоматические отступы, открытие документации.
    По умолчанию использовать стиль =psr-2=.

    #+begin_src emacs-lisp
      (use-package php-mode
        :ensure    t
        :config
        (add-hook 'php-mode-hook #'php-enable-psr2-coding-style))
    #+end_src
   
*** =JavaScript=

    Вообще говоря, =js2= это минорный, а не мажорный режим, но и выносить его за пределы JavaScript-раздела смысла нет.

    #+begin_src emacs-lisp
      (use-package js2-mode
        :ensure    t
        :config
        (add-hook 'js-mode-hook #'js2-minor-mode))
    #+end_src
    
*** =YAML=

    Довольно часто приходится редактировать YAML в различных конфигах. Опять же, от режима требуется, разве что, подсветка синтаксиса и сохранение отступов.

    #+begin_src emacs-lisp
      (use-package yaml-mode
        :ensure    t)
    #+end_src
    
*** =Markdown=

    =README.md= - наше все.

    #+begin_src emacs-lisp
      (use-package markdown-mode
        :ensure    t)
    #+end_src

* Жизнедеятельность

** Самоорганизация

*** Установка свежего =org-mode=

    Устанавливаем свежую версию =org-mode= c дополнениями из официального репозитория.

    #+begin_src emacs-lisp
      (use-package org-plus-contrib
        :ensure    t
        :defer     t)
    #+end_src

    Всегда включаем перенос по словам в длинных строках для org-mode (практика показала, что выключать его приходится многократно реже, чем включать).

    #+begin_src emacs-lisp
      (add-hook 'org-mode-hook 'visual-line-mode)
    #+end_src

*** Настройка шаблонов для =org-capture=

    =org-capture= это крайне полезная штука, позволяющая быстро делать заметки и комментарии из любого места, сохраняя их в указанных местах. В моем случае org-capture вызывается командой =C-c c=.

    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c c") #'org-capture)
    #+end_src

    Мои org-файлы обычно лежат в папке =~/Org=, которая, в свою очередь, является симлинком на папку Org в облаке.

    #+begin_src emacs-lisp
      (setq n-org-files-dir "~/Org"
            n-org-main      (f-join n-org-files-dir "main.org")
            n-org-logbook   (f-join n-org-files-dir "logbook.org.gpg"))
    #+end_src

    Шаблоны, которые я использую:
    - =i= inbox   Попадает в Inbox для последующего разбора, схоже с [[https://ru.wikipedia.org/wiki/Getting_Things_Done][GTD]].
    - =t= todo    Попадает в Inbox в виде TODO-заметки для последующего разбора, схоже с [[https://ru.wikipedia.org/wiki/Getting_Things_Done][GTD]].
    - =l= logbook Используется для фиксации различных событий и мыслей в шифрованном файле, отдаленно напоминает дневник, только не дневник.

    #+begin_src emacs-lisp
      (setq n-capture-templates-dir (f-join n-nemacs-dir "org-templates"))
    #+end_src

    #+begin_src emacs-lisp
      (setq org-capture-templates
            `(("i" "Plain inbox entry"
               entry  (file+headline ,n-org-main "Inbox")
               (file ,(f-join n-capture-templates-dir "inbox-plain.org")))
              ("t" "Todo inbox entry"
               entry  (file+headline ,n-org-main "Inbox")
               (file ,(f-join n-capture-templates-dir "inbox-todo.org")))
              ("l" "Logbook entry"
               entry  (file+olp+datetree ,n-org-logbook)
               (file ,(f-join n-capture-templates-dir "logbook.org")))))
    #+end_src

** Почта (=Gnus=)

   Вообще, для работы с почтой я использую [[https://neomutt.org][neomutt]]. Но поскольку я подписан на множество списков рассылки, где часто присылают код, либо самому приходится отправлять фрагменты кода, сразу использовать редактор бывает очень удобно.

   Извлечением почты у меня занимается [[https://www.offlineimap.org/][offlineimap]], каждые две минуты по крону забирающий почту с сервера по IMAP и аккуратно складывающий ее в папку =~/.mail= в формате Maildir. Помимо того, что это позволяет более полноценно работать с почтой, выбирая инструмент под задачу (иногда просто шелл), так появляется возможность разбирать почту из оффлайна - для десктопа так себе достижение, а для ноутбука бывает очень полезно.

   #+begin_src emacs-lisp
     (setq gnus-select-method '(nnmaildir "nickey" (directory "~/.mail")))
   #+end_src

   Ну а поскольку можно разбирать почту в оффлайне, почему бы ее в оффлайне не писать? Я использую [[https://marlam.de/msmtp/][msmtp]] для отправки почты. В пакете с msmtp идут скрипты =msmtp-enqueue.sh=, =msmtp-listqueue.sh= и =msmtp-runqueue.sh= для работы с очередью отправки. Использую msmtp-enqueue для отправки почты, а msmtp-runqueue запускается по крону для отправки почты.

   #+begin_src emacs-lisp
     (setq message-send-mail-function #'message-send-mail-with-sendmail
           sendmail-program           "~/.local/bin/msmtp-enqueue")
   #+end_src

   По умолчанию Gnus начинает хозяйничать в домашней папке и создавать в ней папки =Mail= и =News=. Спрячем их в глубинах =~/.emacs.d=.

   #+begin_src emacs-lisp
     (setq message-directory  "~/.emacs.d/mail/"
           gnus-directory     "~/.emacs.d/news/"
           nnfolder-directory "~/.emacs.d/mail/archive/")
   #+end_src
